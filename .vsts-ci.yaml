phases:
  - phase: linting_tests
    displayName: Run linting and compliance tests
    queue:
      name: Hosted VS2017
      demands: DotNetFramework
    steps:
    - task: PowerShell@2
      displayName: Run pester tests for templates
      inputs:
        filePath: "./runTests.ps1"
    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testRunner: "NUnit"
        testResultsFiles: "$(Build.SourcesDirectory)\\Test-Pester.XML"
      condition: always()

  - phase: test_foundation_deployment
    dependsOn: linting_tests
    displayName: test Azure function foundation
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    queue:
      name: Hosted VS2017
      demands: DotNetFramework
      matrix:
        functionapp:
          templateName: webapp
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: Deploy resource group template
      inputs:
        action: 'Create Or Update Resource Group'
        azureSubscription: 'ntwairay_azure'
        resourceGroupName: '$(Build.BuildNumber)-$(templateName)'
        location: 'australiaeast'
        csmFile: '$(Build.SourcesDirectory)/templates/$(templateName)/azuredeploy.json'
      condition: or(eq(variables['fileChanged'], 'true'), variables['System.Debug'])
    - task: AzureCLI@1
      displayName: Delete resource group - don't wait
      inputs:
        azureSubscription: 'ntwairay_azure'
        scriptLocation: inlineScript
        inlineScript: az group delete --name $(Build.BuildNumber)-$(templateName) --no-wait --yes

  - phase: publish_template_artifacts
    dependsOn: test_foundation_deployment
    displayName: build template artifacts
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    queue:
      name: Hosted VS2017
      matrix:
        functionapp:
          templateName: functionapp
        keyvault:
          templateName: keyvault
    steps:
    - task: CopyFiles@2
      displayName: Publish template Artifact
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: '**\templates\**'
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: CopyPublishBuildArtifacts@1
      displayName: Copy Publish Artifact
      inputs:
        CopyRoot: '$(Build.ArtifactStagingDirectory)'
        Contents: '**\templates\**'
        ArtifactName: 'templates'
        ArtifactType: Container

  - phase: build_test
    displayName: build test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    queue:
      name: Hosted VS2017
      demands: npm
    steps:
    - task: NodeTool@0
      displayName: Use Node 6.x
    - task: Npm@1
      displayName: npm install
      inputs:
        workingDir: '.'
        verbose: false

  - phase: publish_build_artifacts
    dependsOn: build_test
    displayName: build artifacts
    queue:
      name: Hosted VS2017
      demands: npm
    steps:
    - task: NodeTool@0
      displayName: Use Node 6.x
    - task: Npm@1
      displayName: npm install
      inputs:
        workingDir: '.'
        verbose: false
    - task: ArchiveFiles@2
      displayName: Zip files
      inputs:
        rootFolderOrFile: .
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/source.zip'
    - task: CopyPublishBuildArtifacts@1
      displayName: Copy Publish Artifact
      inputs:
        CopyRoot: '$(Build.ArtifactStagingDirectory)'
        Contents: 'source.zip'
        ArtifactName: 'release'
        ArtifactType: Container
